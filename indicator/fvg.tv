// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// Â© LuxAlgo

//@version=5
indicator("Fair Value Gap [Jeff]", "Jeff - Fair Value Gap", overlay = true, max_lines_count = 500, max_boxes_count = 500)
//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
thresholdPer = input.float(0, "Threshold %", minval = 0, maxval = 100, step = .1, inline = 'threshold')
auto = input(false, "Auto", inline = 'threshold')

showLast = input.int(0, 'Unmitigated Levels', minval = 0)
mitigationLevels = input.bool(false, 'Mitigation Levels')

tf = input.timeframe('', "Timeframe")

//Style
extend = input.int(20, 'Extend', minval = 0, inline = 'extend', group = 'Style')
dynamic = input(false, 'Dynamic', inline = 'extend', group = 'Style')

bullCss = input.color(color.new(#ADD8E6, 70), "Bullish FVG", group = 'Style')
bearCss = input.color(color.new(#f23645, 70), "Bearish FVG", group = 'Style')

//Dashboard
showDash  = input(false, 'Show Dashboard', group = 'Dashboard')
dashLoc  = input.string('Top Right', 'Location', options = ['Top Right', 'Bottom Right', 'Bottom Left'], group = 'Dashboard')
textSize = input.string('Small', 'Size'        , options = ['Tiny', 'Small', 'Normal']                 , group = 'Dashboard')

// Input for session times in New York time zone
session_time = input.session("0930-1600", "Session Time")
day_offset = input.int(0, "Day offset")

// Extract hours and minutes from the session string
start_hour = int(str.tonumber(str.substring(session_time, 0, 2)))
start_minute = int(str.tonumber(str.substring(session_time, 2, 4)))
end_hour = int(str.tonumber(str.substring(session_time, 5, 7)))
end_minute = int(str.tonumber(str.substring(session_time, 7, 9)))

// Get today's date
today_year = year(timenow)
today_month = month(timenow)
today_day = dayofmonth(timenow) - day_offset

// Calculate the session's start and end times for today
session_start = timestamp("America/New_York", today_year, today_month, today_day, start_hour, start_minute)
session_end = timestamp("America/New_York", today_year, today_month, today_day, end_hour, end_minute)


// Check if the current bar is within today's session
in_session = (time >= session_start and time <= session_end)


// Check if the current bar is within the session
// in_session = time(timeframe.period, session_time, "America/New_York")
// in_session = not na(time(timeframe.period, session_time, "America/New_York"))

//-----------------------------------------------------------------------------}
//UDT's
//-----------------------------------------------------------------------------{
type fvg
    float max
    float min
    bool  isbull
    int   t = time

//-----------------------------------------------------------------------------}
//Methods/Functions
//-----------------------------------------------------------------------------{
n = bar_index

method tosolid(color id)=> color.rgb(color.r(id),color.g(id),color.b(id))

detect()=>
    var new_fvg = fvg.new(na, na, na, na)
    threshold = auto ? ta.cum((high - low) / low) / bar_index : thresholdPer / 100

    bull_fvg = low > high[2] and close[1] > high[2] and (low - high[2]) / high[2] > threshold
    bear_fvg = high < low[2] and close[1] < low[2] and (low[2] - high) / high > threshold
    
    if bull_fvg
        new_fvg := fvg.new(low, high[2], true)
    else if bear_fvg
        new_fvg := fvg.new(low[2], high, false)

    [bull_fvg, bear_fvg, new_fvg]

//-----------------------------------------------------------------------------}
//FVG's detection/display
//-----------------------------------------------------------------------------{
var float max_bull_fvg = na, var float min_bull_fvg = na, var bull_count = 0, var bull_mitigated = 0
var float max_bear_fvg = na, var float min_bear_fvg = na, var bear_count = 0, var bear_mitigated = 0
var session_bull_count = 0, var session_bull_mitigated = 0
var session_bear_count = 0, var session_bear_mitigated = 0
var t = 0

var fvg_records = array.new<fvg>(0)
var fvg_areas = array.new<box>(0)

[bull_fvg, bear_fvg, new_fvg] = request.security(syminfo.tickerid, tf, detect())

//Bull FVG's
if bull_fvg and new_fvg.t != t
    if dynamic
        max_bull_fvg := new_fvg.max
        min_bull_fvg := new_fvg.min
    
    //Populate FVG array
    if not dynamic
        fvg_areas.unshift(box.new(n-2, new_fvg.max, n+extend, new_fvg.min, na, bgcolor = bullCss))
    fvg_records.unshift(new_fvg)

    bull_count += 1
    if in_session
        session_bull_count := na(session_bull_count[1]) or not in_session[1] ? 1 : session_bull_count[1] + 1
        log.info("FVG bull #" + str.tostring(session_bull_count) + " - Min: " + str.tostring(new_fvg.min) + " - Max: " + str.tostring(new_fvg.max))
    t := new_fvg.t
else if dynamic
    max_bull_fvg := math.max(math.min(close, max_bull_fvg), min_bull_fvg)

//Bear FVG's
if bear_fvg and new_fvg.t != t
    if dynamic
        max_bear_fvg := new_fvg.max
        min_bear_fvg := new_fvg.min
    
    //Populate FVG array
    if not dynamic
        fvg_areas.unshift(box.new(n-2, new_fvg.max, n+extend, new_fvg.min, na, bgcolor = bearCss))
    fvg_records.unshift(new_fvg)

    bear_count += 1
    if in_session
        session_bear_count += 1    
        log.info("FVG bear #" + str.tostring(session_bear_count) + " - Min: " + str.tostring(new_fvg.min) + " - Max: " + str.tostring(new_fvg.max))

    t := new_fvg.t
else if dynamic
    min_bear_fvg := math.min(math.max(close, min_bear_fvg), max_bear_fvg) 

//-----------------------------------------------------------------------------}
//Unmitigated/Mitigated lines
//-----------------------------------------------------------------------------{
//Test for mitigation
if fvg_records.size() > 0
    for i = fvg_records.size()-1 to 0
        get = fvg_records.get(i)

        if get.isbull
            if close < get.min
                //Display line if mitigated
                if mitigationLevels
                    line.new(get.t
                      , get.min
                      , time
                      , get.min
                      , xloc.bar_time
                      , color = bullCss
                      , style = line.style_dashed)

                //Delete box
                if not dynamic
                    area = fvg_areas.remove(i)
                    area.delete()

                fvg_records.remove(i)
                bull_mitigated += 1
                if in_session and (get.t >= session_start and get.t <= session_end)
                    session_bull_mitigated += 1
                    log.info("Bull mitigated #" + str.tostring(session_bull_mitigated) + " - t: " + str.format("{0,date,yyyy-MM-dd HH:mm:ss}", get.t) + " - Min: " + str.tostring(get.min) + " - Max: " + str.tostring(get.max))


        else if close > get.max
            //Display line if mitigated
            if mitigationLevels
                line.new(get.t
                  , get.max
                  , time
                  , get.max
                  , xloc.bar_time
                  , color = bearCss
                  , style = line.style_dashed)

            //Delete box
            if not dynamic
                area = fvg_areas.remove(i)
                area.delete()
            
            fvg_records.remove(i)
            bear_mitigated += 1
            if in_session and (get.t >= session_start and get.t <= session_end)
                session_bear_mitigated += 1    
                log.info("Bear mitigated #" + str.tostring(session_bear_mitigated) + " - t: " + str.format("{0,date,yyyy-MM-dd HH:mm:ss}", get.t) + " - Min: " + str.tostring(get.min) + " - Max: " + str.tostring(get.max))
                       

//Unmitigated lines
var unmitigated = array.new<line>(0)

//Remove umitigated lines 
if barstate.islast and showLast > 0 and fvg_records.size() > 0
    if unmitigated.size() > 0 
        for element in unmitigated
            element.delete()
        unmitigated.clear()

    for i = 0 to math.min(showLast-1, fvg_records.size()-1)
        get = fvg_records.get(i)

        unmitigated.push(line.new(get.t
          , get.isbull ? get.min : get.max 
          , time
          , get.isbull ? get.min : get.max
          , xloc.bar_time
          , color = get.isbull ? bullCss : bearCss))

//-----------------------------------------------------------------------------}
//Dashboard
//-----------------------------------------------------------------------------{
var table_position = dashLoc == 'Bottom Left' ? position.bottom_left 
  : dashLoc == 'Top Right' ? position.top_right 
  : position.bottom_right

var table_size = textSize == 'Tiny' ? size.tiny 
  : textSize == 'Small' ? size.small 
  : size.normal

var tb = table.new(table_position, 7, 7
  , bgcolor = #1e222d
  , border_color = #373a46
  , border_width = 1
  , frame_color = #373a46
  , frame_width = 1)

if showDash
    if barstate.isfirst
        tb.cell(0, 0, 'FVG Metrics', text_color = color.white, text_size = table_size)
        tb.cell(1, 0, 'Bullish', text_color = bullCss.tosolid(), text_size = table_size)
        tb.cell(2, 0, 'Bearish', text_color = bearCss.tosolid(), text_size = table_size)
        tb.cell(3, 0, 'Total', text_color = color.yellow, text_size = table_size)

    
        tb.cell(0, 1, '[All] Total Count', text_size = table_size, text_color = color.white, text_halign = text.align_left)
        tb.cell(0, 2, '[All] Unmitigated (Count, %)', text_size = table_size, text_color = color.white, text_halign = text.align_left)
        tb.cell(0, 3, '[All] Mitigated (Count, %)', text_size = table_size, text_color = color.white, text_halign = text.align_left)
        tb.cell(0, 4, '[In Session] Total Count', text_size = table_size, text_color = color.white, text_halign = text.align_left)
        tb.cell(0, 5, '[In Session] Unmitigated (Count, %)', text_size = table_size, text_color = color.white, text_halign = text.align_left)
        tb.cell(0, 6, '[In Session] Mitigated (Count, %)', text_size = table_size, text_color = color.white, text_halign = text.align_left)
    
    if barstate.islast
        // All Bull & Bear Total Count
        tb.cell(1, 1, str.tostring(bull_count), text_color = bullCss.tosolid(), text_size = table_size)
        tb.cell(2, 1, str.tostring(bear_count), text_color = bearCss.tosolid(), text_size = table_size)
        tb.cell(3, 1, str.tostring(bull_count + bear_count), text_color = color.yellow, text_size = table_size)

        // All Bull & Bear Unmitigated %
        bull_unmitigated = bull_count - bull_mitigated
        bear_unmitigated = bear_count - bear_mitigated
        tb.cell(1, 2, str.tostring(bull_unmitigated) +' ('+ str.tostring(bull_unmitigated / bull_count * 100, format.percent) + ')', text_color = bullCss.tosolid(), text_size = table_size)
        tb.cell(2, 2, str.tostring(bear_unmitigated) +' ('+ str.tostring(bear_unmitigated / bear_count * 100, format.percent) + ')', text_color = bearCss.tosolid(), text_size = table_size)
        tb.cell(3, 2, str.tostring(bull_unmitigated + bear_unmitigated) + ' (' + str.tostring((bull_unmitigated + bear_unmitigated) / (bull_count+bear_count) * 100, format.percent) + ')', text_color = color.yellow, text_size = table_size)


        // All Bull & Bear Mitigated %
        tb.cell(1, 3, str.tostring(bull_mitigated) +' ('+ str.tostring(bull_mitigated / bull_count * 100, format.percent) + ')', text_color = bullCss.tosolid(), text_size = table_size)
        tb.cell(2, 3, str.tostring(bear_mitigated) +' ('+ str.tostring(bear_mitigated / bear_count * 100, format.percent) + ')', text_color = bearCss.tosolid(), text_size = table_size)
        tb.cell(3, 3, str.tostring(bull_mitigated + bear_mitigated) + ' (' + str.tostring((bull_mitigated + bear_mitigated) / (bull_count+bear_count) * 100, format.percent) + ')', text_color = color.yellow, text_size = table_size)

        // Current Bull & Bear Total Count
        tb.cell(1, 4, str.tostring(session_bull_count), text_color = bullCss.tosolid(), text_size = table_size)
        tb.cell(2, 4, str.tostring(session_bear_count), text_color = bearCss.tosolid(), text_size = table_size)
        tb.cell(3, 4, str.tostring(session_bull_count + session_bear_count), text_color = bearCss.tosolid(), text_size = table_size)

        // Current Bull & Bear Unmitigated %
        session_bull_unmitigated = session_bull_count - session_bull_mitigated
        session_bear_unmitigated = session_bear_count - session_bear_mitigated
        tb.cell(1, 5, str.tostring(session_bull_unmitigated) +' ('+ str.tostring(session_bull_unmitigated / session_bull_count * 100, format.percent) + ')', text_color = bullCss.tosolid(), text_size = table_size)
        tb.cell(2, 5, str.tostring(session_bear_unmitigated) +' ('+ str.tostring(session_bear_unmitigated / session_bear_count * 100, format.percent) + ')', text_color = bearCss.tosolid(), text_size = table_size)
        tb.cell(3, 5, str.tostring(session_bull_unmitigated + session_bear_unmitigated) +' ('+ str.tostring((session_bull_unmitigated + session_bear_unmitigated) / (session_bull_count + session_bear_count) * 100, format.percent) + ')', text_color = bearCss.tosolid(), text_size = table_size)


        // Current Bull & Bear Mitigated %
        tb.cell(1, 6, str.tostring(session_bull_mitigated) +' ('+ str.tostring(session_bull_mitigated / session_bull_count * 100, format.percent) + ')', text_color = bullCss.tosolid(), text_size = table_size)
        tb.cell(2, 6, str.tostring(session_bear_mitigated) +' ('+ str.tostring(session_bear_mitigated / session_bear_count * 100, format.percent) + ')', text_color = bearCss.tosolid(), text_size = table_size)
        tb.cell(3, 6, str.tostring(session_bull_mitigated + session_bear_mitigated) +' ('+ str.tostring((session_bull_mitigated + session_bear_mitigated) / (session_bull_count + session_bear_count) * 100, format.percent) + ')', text_color = bearCss.tosolid(), text_size = table_size)

//-----------------------------------------------------------------------------}
//Plots
//-----------------------------------------------------------------------------{
//Dynamic Bull FVG
max_bull_plot = plot(max_bull_fvg, color = na)
min_bull_plot = plot(min_bull_fvg, color = na)
fill(max_bull_plot, min_bull_plot, color = bullCss)

//Dynamic Bear FVG
max_bear_plot = plot(max_bear_fvg, color = na)
min_bear_plot = plot(min_bear_fvg, color = na)
fill(max_bear_plot, min_bear_plot, color = bearCss)

//-----------------------------------------------------------------------------}
//Alerts
//-----------------------------------------------------------------------------{
alertcondition(bull_count > bull_count[1], 'Bullish FVG', 'Bullish FVG detected')
alertcondition(bear_count > bear_count[1], 'Bearish FVG', 'Bearish FVG detected')

alertcondition(bull_mitigated > bull_mitigated[1], 'Bullish FVG Mitigation', 'Bullish FVG mitigated')
alertcondition(bear_mitigated > bear_mitigated[1], 'Bearish FVG Mitigation', 'Bearish FVG mitigated')

//-----------------------------------------------------------------------------}